<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux-Centos7安装、使用及问题]]></title>
    <url>%2F2019%2F03%2F18%2Flinux-Centos7%E5%AE%89%E8%A3%85%E5%8F%8A%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[&ensp; &ensp; 写在前面：Centos7 U盘安装、虚拟安装及部署所遇问题。 1.U盘安装直接IOS写入即可，避免FAT32大小问题。如果安装顺利，直接使用；如果不幸重启各种故障，不要各种百度，也不用求Google，根据我的经验，最好的方式是重装，根据下方教程耐心尝试几次，虚拟安装和多系统、或单系统安装过程没区别。U盘安装可能会遇到之前写入镜像文件的U盘插入其它电脑无法使用现象，不用担心，这里最直接的方法是下载老毛桃之类软件，强制初始化U盘就OK。VMware安装Centos7超详细过程（图文） https://blog.csdn.net/babyxue/article/details/80970526https://blog.csdn.net/u013168176/article/details/81144193 2.linux常用命令及教程常用命令必备 https://blog.csdn.net/xulong_08/article/details/81463054强烈推荐-鸟哥的linux私房菜 http://cn.linux.vbird.org/ 3.服务器改造，putty及远程连接putty基本部署 https://www.jianshu.com/p/7dc15bc448c7PSFTP命令 https://blog.csdn.net/chen_gp_x/article/details/79299863xrdp https://jingyan.baidu.com/article/a3aad71a12e5b6b1fb009693.htmlvnc https://blog.51cto.com/12217917/2060252 4.各种故障及技巧（不断补充）桌面WiFi消失命令行连接 https://www.cnblogs.com/little-snake/p/4662374.html桌面快捷（重点在权限，切root创建） https://www.cnblogs.com/alliancehacker/p/centos7.html磁盘扩容 https://blog.csdn.net/weixin_41004350/article/details/79612647后台运行https://blog.csdn.net/lidongshengajz/article/details/72643303 5.mysql数据库更新MariaDB 5.5 到 10.x https://www.jianshu.com/p/e153aad8006b]]></content>
      <categories>
        <category>linux</category>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>centos7安装</tag>
        <tag>centos7服务器搭建</tag>
        <tag>centos7问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Superset安装部署及Echarts接入]]></title>
    <url>%2F2019%2F01%2F23%2Fsuperset%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8Aecharts%E6%8E%A5%E5%85%A5%2F</url>
    <content type="text"><![CDATA[&ensp; &ensp; 写在前面：superset上手非常简易，二次开发要求较高。superset本身依赖Python模块就很多，开发需要深入理解核心模块源码，当然对前端要求也高。通过superset可视化dashboard足以支持一般公司业务需求，更多个性化需求就需要前端开发肝了。百度echarts丰富的map也可以做些补充。相对来说echarts接入较为简单，但是由于不懂前端，这里虽然照做了几遍，重新登录依旧刷不出新图，之后突然意识到要重新编译前端源码，在/assets/下执行npm run dev（注：这里可能会报错，根据错误百度修改），再次重登superset就可以了。 推荐-superset官方手册 http://superset.apache.org/tutorial.html Superset的安装配置及基础使用手册 https://blog.csdn.net/folecld123/article/details/80705616 Superset在Winodw安装以及问题整理 https://www.cnblogs.com/Jonecmnn/p/7417498.html uperset集成kylin2.5.0 https://www.liangzl.com/get-article-detail-34757.html 安装、集成ECharts和汉化 https://blog.csdn.net/qq_33703137/article/details/87874277 推荐-Superset二次开发（全面） https://blog.csdn.net/oASiDuoFu/article/details/80525651 推荐-Superset集成Echarts并调整数据接口-更新0.28.1 https://zhuanlan.zhihu.com/p/46992404 superset接入可视化echarts图表（Py2、0.28以前） https://juejin.im/post/5cde1210f265da03b8587776 superset的安装以及和echart整合（superset0.28以前） https://blog.csdn.net/lzlnd/article/details/85167270 superset云部署 https://www.jianshu.com/p/9ad7e29792dd nginx+gunicorn+upstart方式部署 https://www.jianshu.com/p/28b42f27744a 推荐-用Gunicorn部署Superset https://zhuanlan.zhihu.com/p/59321685 Superset，开发者视角 https://zhuanlan.zhihu.com/c_100045590 superset二次开发 https://zhuanlan.zhihu.com/c_151634429 Superset登录权限自定义 https://www.jianshu.com/p/063ccb8e2a75 匿名访问权限-用于同服务器分享 https://jingyan.baidu.com/article/22fe7cedec9adb3003617f41.html **linux npm安装及解析核心问题1.linux yum安装版本低，各种bug，建议通过wget方式。见下方链接方式二https://www.jianshu.com/p/ea0fe8d177c02.npm run dev各种bug，逐条修改试试，linux环境真心累。。如果还是不行，删除node_modules试试。我的linux配置历程，各种意外bug都出了，pip安装的superset static缺少src文件，npm自动install部分模块缺少文件，最后通过psftp传输成功的window下解析后superset才可正常使用。虽然linux系统干净用着舒服，不过开发还是window用着手感更好，linux主要用来做服务器部署。https://fangyeqing.github.io/2017/03/04/superset%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/ Echarts接入核心步骤(以下均来自知乎林余，感谢攻略！)：1. superset\viz.py后端处理前端传入数据，根据echarts官网数据格式，模仿其它模块修改接入图表类，主要修改get_data函数viz.py1234567891011121314151617181920212223class echartsRadar(BaseViz): """ echarts radar viz """ viz_type = 'echarts_radar' # 对应前端名字 verbose_name = _('echarts_radar') is_timeseries = False def get_data(self, df): data = self.handle_js_int_overflow( dict( records=df.to_dict(orient='records'), columns=list(df.columns), )) columns_pre = [data['records'][i][data['columns'][0]] for i in range(len(data['records']))] max_num = np.max([data['records'][i][data['columns'][1]] for i in range(len(data['records']))]) columns = [&#123;'name': columns_pre[i], 'max':str(max_num)&#125;for i in range(len(columns_pre))] out_data = [ &#123;'value': [data['records'][i][data['columns'][j+1]] for i in range(len(data['records']))], 'name':data['columns'][j+1]&#125;for j in range(len(data['columns'])-1) ] return [&#123;'indicator' : columns, 'data' : out_data&#125;] 2. superset\static\assets\src\visualizations\前端图标配置文件，也是对接echarts库的文件 superset\static\assets\src\visualizations\EchartsMap(新增图表文件夹名) (注：可以把echarts不同类型图表放到一个文件夹下处理，便于管理) superset\static\assets\src\visualizations\EchartsMap(新增图表文件夹名)\images (注：superset图表展示用，从echarts官网直接取图即可，像素大小不影响) superset\static\assets\src\visualizations\EchartsMap(新增图表文件夹名)\echarts_radar(新增图表名称).jsecharts_radar(新增图表名称).js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566import echarts from 'echarts';function echartsAngularGaugeVis(slice, payload) &#123; const div = d3.select(slice.selector); const sliceId = 'echarts_slice_' + slice.formData.slice_id; const html = '&lt;div id=' + sliceId + ' style="width:' + slice.width() + 'px;height:' + slice.height() + 'px;"&gt;&lt;/div&gt;'; div.html(html); // reset const myChart = echarts.init(document.getElementById(sliceId)); // const fd = slice.formData; const params = payload.data; //这是从后端viz.py获取数据的标准写法 const indicator = params[0]["indicator"] //因为雷达图有两个地方要用到后端传来的数据，根据处理过的数据格式取出来 const data = params[0]["data"] //同上 const dataName = []; // echarts需要的是两个数组//以下开始是从echarts官网抄的，当然也可以自己设置，可以对比这一段跟官网的设置（增加了tooltip显示规则和label) const option = &#123; tooltip : &#123; // trigger: 'item', // formatter: '&#123;a&#125;, &#123;b&#125;，&#123;c&#125;，&#123;d&#125;，&#123;e&#125;' position: function (pos, params, dom, rect, size) &#123; // 鼠标在左侧时 tooltip 显示到右侧，鼠标在右侧时 tooltip 显示到左侧。 var obj = &#123;top: 60&#125;; obj[['left', 'right'][+(pos[0] &lt; size.viewSize[0] / 2)]] = 5; return obj; &#125; &#125;, legend: &#123; orient : 'vertical', x : 'right', y : 'bottom' &#125;, toolbox: &#123; show : true, feature : &#123; mark : &#123;show: true&#125;, dataView : &#123;show: true, readOnly: false&#125; &#125; &#125;, radar : &#123; indicator: indicator, name: &#123; textStyle: &#123; color: '#454545', borderRadius: 3, padding: [3, 5] &#125; &#125; &#125;, series : [ &#123; type : 'radar', data : data, label: &#123; show: true, position: ['150%', '150%'], distance: 10 &#125; &#125; ] &#125;; // 使用刚指定的配置项和数据显示图表。 myChart.setOption(option);&#125;module.exports = echartsAngularGaugeVis; 3. superset\static\assets\src\visualizations\index.js主要用来前端后端函数匹配，参照存在格式添加VIZ_TYPES和vizMap，该步简单VIZ_TYPES1234export const VIZ_TYPES = &#123; …… echarts_radar: &apos;echarts_radar&apos;, //此行新增&#125;;vizMap1234const vizMap = &#123; …… [VIZ_TYPES.echarts_radar]: () =&gt; loadVis(import(&apos;./EchartsMap/echarts_radar.js&apos;)),//此行新增&#125;; 4. superset\static\assets\src\explore\visTypes.jsx前端图标配置区组件设置，就是superset左侧的groupby、metrics等组件的开关，需根据配置的图表需要的数据格式选择合适的组件visTypes.jsx1234567891011121314151617export const visTypes = &#123; …… echarts_radar: &#123; label: t(&apos;echarts_radar&apos;), showOnExplore: true, controlPanelSections: [ &#123; label: t(&apos;Query&apos;), expanded: true, //主要是下面的部分，可以找superset原有的图表模板，通过查看sql的方式看看每个配件都是做什么的 controlSetRows: [ [&apos;metrics&apos;], [&apos;columns&apos;], [&apos;adhoc_filters&apos;], ] &#125; ] &#125;, 5. 重新编译前端源代码在/assets/下执行npm run dev，再次重登superset。]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>superset</tag>
        <tag>echarts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式]]></title>
    <url>%2F2019%2F01%2F21%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[&ensp; &ensp; 写在前面：整理常用正则表达式规则，以作参考。以下代码均通过Python re模块实现。 正则表达式在线测试 以下内容均来源于崔庆才大神爬虫教程 常见匹配模式 模式 描述 \w 匹配字母数字及下划线 \W 匹配非字母数字下划线 \s 匹配任意空白字符，等价于 [\t\n\r\f]. \S 匹配任意非空字符 \d 匹配任意数字，等价于 [0-9] \D 匹配任意非数字 \A 匹配字符串开始 \Z 匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串 \z 匹配字符串结束 \G 匹配最后匹配完成的位置 \n 匹配一个换行符 \t 匹配一个制表符 ^ 匹配字符串的开头 $ 匹配字符串的末尾。 . 匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。 […] 用来表示一组字符,单独列出：[amk] 匹配 ‘a’，’m’或’k’ [^…] 不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。 * 匹配0个或多个的表达式。 + 匹配1个或多个的表达式。 ? 匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式 {n} 精确匹配n个前面表达式。 {n, m} 匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式 a&#124;b 匹配a或b ( ) 匹配括号内的表达式，也表示一个组 re.matchre.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。re.match(pattern, string, flags=0) 最常规的匹配12345678import recontent = 'Hello 123 4567 World_This is a Regex Demo'print(len(content))result = re.match('^Hello\s\d\d\d\s\d&#123;4&#125;\s\w&#123;10&#125;.*Demo$', content)print(result)print(result.group())print(result.span()) 41 &lt;_sre.SRE_Match object; span=(0, 41), match=&#39;Hello 123 4567 World_This is a Regex Demo&#39;&gt; Hello 123 4567 World_This is a Regex Demo (0, 41) 泛匹配1234567import recontent = 'Hello 123 4567 World_This is a Regex Demo'result = re.match('^Hello.*Demo$', content)print(result)print(result.group())print(result.span()) &lt;_sre.SRE_Match object; span=(0, 41), match=&#39;Hello 123 4567 World_This is a Regex Demo&#39;&gt; Hello 123 4567 World_This is a Regex Demo (0, 41) 匹配目标1234567import recontent = 'Hello 1234567 World_This is a Regex Demo'result = re.match('^Hello\s(\d+)\sWorld.*Demo$', content)print(result)print(result.group(1))print(result.span()) &lt;_sre.SRE_Match object; span=(0, 40), match=&#39;Hello 1234567 World_This is a Regex Demo&#39;&gt; 1234567 (0, 40) 贪婪匹配123456import recontent = 'Hello 1234567 World_This is a Regex Demo'result = re.match('^He.*(\d+).*Demo$', content)print(result)print(result.group(1)) &lt;_sre.SRE_Match object; span=(0, 40), match=&#39;Hello 1234567 World_This is a Regex Demo&#39;&gt; 7 非贪婪匹配123456import recontent = 'Hello 1234567 World_This is a Regex Demo'result = re.match('^He.*?(\d+).*Demo$', content)print(result)print(result.group(1)) &lt;_sre.SRE_Match object; span=(0, 40), match=&#39;Hello 1234567 World_This is a Regex Demo&#39;&gt; 1234567 匹配模式1234567import recontent = '''Hello 1234567 World_Thisis a Regex Demo'''result = re.match('^He.*?(\d+).*?Demo$', content, re.S)print(result.group(1)) 1234567 转义12345import recontent = 'price is $5.00'result = re.match('price is $5.00', content)print(result) None 12345import recontent = 'price is $5.00'result = re.match('price is \$5\.00', content)print(result) &lt;_sre.SRE_Match object; span=(0, 14), match=&#39;price is $5.00&#39;&gt; 总结：尽量使用泛匹配、使用括号得到匹配目标、尽量使用非贪婪模式、有换行符就用re.S re.searchre.search 扫描整个字符串并返回第一个成功的匹配。 12345import recontent = 'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'result = re.match('Hello.*?(\d+).*?Demo', content)print(result) None 123456import recontent = 'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'result = re.search('Hello.*?(\d+).*?Demo', content)print(result)print(result.group(1)) &lt;_sre.SRE_Match object; span=(13, 53), match=&#39;Hello 1234567 World_This is a Regex Demo&#39;&gt; 1234567 总结：为匹配方便，能用search就不用match 匹配演练12345678910111213141516171819202122232425import rehtml = '''&lt;div id="songs-list"&gt; &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt; &lt;p class="introduction"&gt; 经典老歌列表 &lt;/p&gt; &lt;ul id="list" class="list-group"&gt; &lt;li data-view="2"&gt;一路上有你&lt;/li&gt; &lt;li data-view="7"&gt; &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt; &lt;/li&gt; &lt;li data-view="4" class="active"&gt; &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt; &lt;/li&gt; &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt; &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt; &lt;li data-view="5"&gt; &lt;a href="/6.mp3" singer="邓丽君"&gt;&lt;i class="fa fa-user"&gt;&lt;/i&gt;但愿人长久&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;'''result = re.search('&lt;li.*?active.*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;', html, re.S)if result: print(result.group(1), result.group(2)) 齐秦 往事随风 12345678910111213141516171819202122232425import rehtml = '''&lt;div id="songs-list"&gt; &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt; &lt;p class="introduction"&gt; 经典老歌列表 &lt;/p&gt; &lt;ul id="list" class="list-group"&gt; &lt;li data-view="2"&gt;一路上有你&lt;/li&gt; &lt;li data-view="7"&gt; &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt; &lt;/li&gt; &lt;li data-view="4" class="active"&gt; &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt; &lt;/li&gt; &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt; &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt; &lt;li data-view="5"&gt; &lt;a href="/6.mp3" singer="邓丽君"&gt;但愿人长久&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;'''result = re.search('&lt;li.*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;', html, re.S)if result: print(result.group(1), result.group(2)) 任贤齐 沧海一声笑 12345678910111213141516171819202122232425import rehtml = '''&lt;div id="songs-list"&gt; &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt; &lt;p class="introduction"&gt; 经典老歌列表 &lt;/p&gt; &lt;ul id="list" class="list-group"&gt; &lt;li data-view="2"&gt;一路上有你&lt;/li&gt; &lt;li data-view="7"&gt; &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt; &lt;/li&gt; &lt;li data-view="4" class="active"&gt; &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt; &lt;/li&gt; &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt; &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt; &lt;li data-view="5"&gt; &lt;a href="/6.mp3" singer="邓丽君"&gt;但愿人长久&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;'''result = re.search('&lt;li.*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;', html)if result: print(result.group(1), result.group(2)) beyond 光辉岁月 re.findall搜索字符串，以列表形式返回全部能匹配的子串。 12345678910111213141516171819202122232425262728import rehtml = '''&lt;div id="songs-list"&gt; &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt; &lt;p class="introduction"&gt; 经典老歌列表 &lt;/p&gt; &lt;ul id="list" class="list-group"&gt; &lt;li data-view="2"&gt;一路上有你&lt;/li&gt; &lt;li data-view="7"&gt; &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt; &lt;/li&gt; &lt;li data-view="4" class="active"&gt; &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt; &lt;/li&gt; &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt; &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt; &lt;li data-view="5"&gt; &lt;a href="/6.mp3" singer="邓丽君"&gt;但愿人长久&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;'''results = re.findall('&lt;li.*?href="(.*?)".*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;', html, re.S)print(results)print(type(results))for result in results: print(result) print(result[0], result[1], result[2]) [(&#39;/2.mp3&#39;, &#39;任贤齐&#39;, &#39;沧海一声笑&#39;), (&#39;/3.mp3&#39;, &#39;齐秦&#39;, &#39;往事随风&#39;), (&#39;/4.mp3&#39;, &#39;beyond&#39;, &#39;光辉岁月&#39;), (&#39;/5.mp3&#39;, &#39;陈慧琳&#39;, &#39;记事本&#39;), (&#39;/6.mp3&#39;, &#39;邓丽君&#39;, &#39;但愿人长久&#39;)] &lt;class &#39;list&#39;&gt; (&#39;/2.mp3&#39;, &#39;任贤齐&#39;, &#39;沧海一声笑&#39;) /2.mp3 任贤齐 沧海一声笑 (&#39;/3.mp3&#39;, &#39;齐秦&#39;, &#39;往事随风&#39;) /3.mp3 齐秦 往事随风 (&#39;/4.mp3&#39;, &#39;beyond&#39;, &#39;光辉岁月&#39;) /4.mp3 beyond 光辉岁月 (&#39;/5.mp3&#39;, &#39;陈慧琳&#39;, &#39;记事本&#39;) /5.mp3 陈慧琳 记事本 (&#39;/6.mp3&#39;, &#39;邓丽君&#39;, &#39;但愿人长久&#39;) /6.mp3 邓丽君 但愿人长久 1234567891011121314151617181920212223242526import rehtml = '''&lt;div id="songs-list"&gt; &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt; &lt;p class="introduction"&gt; 经典老歌列表 &lt;/p&gt; &lt;ul id="list" class="list-group"&gt; &lt;li data-view="2"&gt;一路上有你&lt;/li&gt; &lt;li data-view="7"&gt; &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt; &lt;/li&gt; &lt;li data-view="4" class="active"&gt; &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt; &lt;/li&gt; &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt; &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt; &lt;li data-view="5"&gt; &lt;a href="/6.mp3" singer="邓丽君"&gt;但愿人长久&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;'''results = re.findall('&lt;li.*?&gt;\s*?(&lt;a.*?&gt;)?(\w+)(&lt;/a&gt;)?\s*?&lt;/li&gt;', html, re.S)print(results)for result in results: print(result[1]) [(&#39;&#39;, &#39;一路上有你&#39;, &#39;&#39;), (&#39;&lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;&#39;, &#39;沧海一声笑&#39;, &#39;&lt;/a&gt;&#39;), (&#39;&lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;&#39;, &#39;往事随风&#39;, &#39;&lt;/a&gt;&#39;), (&#39;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;&#39;, &#39;光辉岁月&#39;, &#39;&lt;/a&gt;&#39;), (&#39;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;&#39;, &#39;记事本&#39;, &#39;&lt;/a&gt;&#39;), (&#39;&lt;a href=&quot;/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;&#39;, &#39;但愿人长久&#39;, &#39;&lt;/a&gt;&#39;)] 一路上有你 沧海一声笑 往事随风 光辉岁月 记事本 但愿人长久 re.sub替换字符串中每一个匹配的子串后返回替换后的字符串。 12345import recontent = 'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'content = re.sub('\d+', '', content)print(content) Extra stings Hello World_This is a Regex Demo Extra stings 12345import recontent = 'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'content = re.sub('\d+', 'Replacement', content)print(content) Extra stings Hello Replacement World_This is a Regex Demo Extra stings 12345import recontent = 'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'content = re.sub('(\d+)', r'\1 8910', content)print(content) Extra stings Hello 1234567 8910 World_This is a Regex Demo Extra stings 12345678910111213141516171819202122import rehtml = '''&lt;div id="songs-list"&gt; &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt; &lt;p class="introduction"&gt; 经典老歌列表 &lt;/p&gt; &lt;ul id="list" class="list-group"&gt; &lt;li data-view="2"&gt;一路上有你&lt;/li&gt; &lt;li data-view="7"&gt; &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt; &lt;/li&gt; &lt;li data-view="4" class="active"&gt; &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt; &lt;/li&gt; &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt; &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt; &lt;li data-view="5"&gt; &lt;a href="/6.mp3" singer="邓丽君"&gt;但愿人长久&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;''' 12345678910111213141516171819202122232425262728import rehtml = '''&lt;div id="songs-list"&gt; &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt; &lt;p class="introduction"&gt; 经典老歌列表 &lt;/p&gt; &lt;ul id="list" class="list-group"&gt; &lt;li data-view="2"&gt;一路上有你&lt;/li&gt; &lt;li data-view="7"&gt; &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt; &lt;/li&gt; &lt;li data-view="4" class="active"&gt; &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt; &lt;/li&gt; &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt; &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt; &lt;li data-view="5"&gt; &lt;a href="/6.mp3" singer="邓丽君"&gt;但愿人长久&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;'''html = re.sub('&lt;a.*?&gt;|&lt;/a&gt;', '', html)print(html)results = re.findall('&lt;li.*?&gt;(.*?)&lt;/li&gt;', html, re.S)print(results)for result in results: print(result.strip()) &lt;div id=&quot;songs-list&quot;&gt; &lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt; &lt;p class=&quot;introduction&quot;&gt; 经典老歌列表 &lt;/p&gt; &lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt; &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt; &lt;li data-view=&quot;7&quot;&gt; 沧海一声笑 &lt;/li&gt; &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt; 往事随风 &lt;/li&gt; &lt;li data-view=&quot;6&quot;&gt;光辉岁月&lt;/li&gt; &lt;li data-view=&quot;5&quot;&gt;记事本&lt;/li&gt; &lt;li data-view=&quot;5&quot;&gt; 但愿人长久 &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; [&#39;一路上有你&#39;, &#39;\n 沧海一声笑\n &#39;, &#39;\n 往事随风\n &#39;, &#39;光辉岁月&#39;, &#39;记事本&#39;, &#39;\n 但愿人长久\n &#39;] 一路上有你 沧海一声笑 往事随风 光辉岁月 记事本 但愿人长久 re.compile将正则字符串编译成正则表达式对象 1将一个正则表达式串编译成正则对象，以便于复用该匹配模式 12345678import recontent = '''Hello 1234567 World_Thisis a Regex Demo'''pattern = re.compile('Hello.*Demo', re.S)result = re.match(pattern, content)#result = re.match('Hello.*Demo', content, re.S)print(result) &lt;_sre.SRE_Match object; span=(0, 40), match=&#39;Hello 1234567 World_This\nis a Regex Demo&#39;&gt; 实战练习12345678910import requestsimport recontent = requests.get('https://book.douban.com/').textpattern = re.compile('&lt;li.*?cover.*?href="(.*?)".*?title="(.*?)".*?more-meta.*?author"&gt;(.*?)&lt;/span&gt;.*?year"&gt;(.*?)&lt;/span&gt;.*?&lt;/li&gt;', re.S)results = re.findall(pattern, content)for result in results: url, name, author, date = result author = re.sub('\s', '', author) date = re.sub('\s', '', date) print(url, name, author, date) https://book.douban.com/subject/26925834/?icn=index-editionrecommend 别走出这一步 [英]S.J.沃森 2017-1 https://book.douban.com/subject/26953532/?icn=index-editionrecommend 白先勇细说红楼梦 白先勇 2017-2-1 https://book.douban.com/subject/26959159/?icn=index-editionrecommend 岁月凶猛 冯仑 2017-2 https://book.douban.com/subject/26949210/?icn=index-editionrecommend 如果没有今天，明天会不会有昨天？ [瑞士]伊夫·博萨尔特（YvesBossart） 2017-1 https://book.douban.com/subject/27001447/?icn=index-editionrecommend 人类这100年 阿夏 2017-2 https://book.douban.com/subject/26864566/?icn=index-latestbook-subject 眼泪的化学 [澳]彼得·凯里 2017-2 https://book.douban.com/subject/26991064/?icn=index-latestbook-subject 青年斯大林 [英]西蒙·蒙蒂菲奥里 2017-3 https://book.douban.com/subject/26938056/?icn=index-latestbook-subject 带艾伯特回家 [美]霍默·希卡姆 2017-3 https://book.douban.com/subject/26954757/?icn=index-latestbook-subject 乳房 [美]弗洛伦斯·威廉姆斯 2017-2 https://book.douban.com/subject/26956479/?icn=index-latestbook-subject 草原动物园 马伯庸 2017-3 https://book.douban.com/subject/26956018/?icn=index-latestbook-subject 贩卖音乐 [美]大卫·伊斯曼 2017-3-1 https://book.douban.com/subject/26703649/?icn=index-latestbook-subject 被占的宅子 [阿根廷]胡利奥·科塔萨尔 2017-3 https://book.douban.com/subject/26578402/?icn=index-latestbook-subject 信仰与观看 [法]罗兰·雷希特(RolandRecht) 2017-2-17 https://book.douban.com/subject/26939171/?icn=index-latestbook-subject 妹妹的坟墓 [美]罗伯特·杜格尼(RobertDugoni) 2017-3-1 https://book.douban.com/subject/26972465/?icn=index-latestbook-subject 全栈市场人 Lydia 2017-2-1 https://book.douban.com/subject/26986928/?icn=index-latestbook-subject 终极X战警2 [英]马克·米勒&amp;nbsp;/&amp;nbsp;[美]亚当·库伯特 2017-3-15 https://book.douban.com/subject/26948144/?icn=index-latestbook-subject 格调（修订第3版） [美]保罗·福塞尔（PaulFussell） 2017-2 https://book.douban.com/subject/26945792/?icn=index-latestbook-subject 原谅石 [美]洛里·斯皮尔曼 2017-2 https://book.douban.com/subject/26974207/?icn=index-latestbook-subject 庇护二世闻见录 [意]皮科洛米尼 2017-2 https://book.douban.com/subject/26983143/?icn=index-latestbook-subject 遇见野兔的那一年 [芬]阿托·帕西林纳 2017-3-1 https://book.douban.com/subject/26976429/?icn=index-latestbook-subject 鲍勃·迪伦：诗人之歌 [法]让-多米尼克·布里埃 2017-4 https://book.douban.com/subject/26962860/?icn=index-latestbook-subject 牙医谋杀案 [英]阿加莎·克里斯蒂 2017-3 https://book.douban.com/subject/26923022/?icn=index-latestbook-subject 石挥谈艺录：把生命交给舞台 石挥 2017-2 https://book.douban.com/subject/26897190/?icn=index-latestbook-subject 理想 [美]安·兰德 2017-2 https://book.douban.com/subject/26985981/?icn=index-latestbook-subject 青苔不会消失 袁凌 2017-4 https://book.douban.com/subject/26984949/?icn=index-latestbook-subject 地下铁道 [美]科尔森·怀特黑德（ColsonWhitehead） 2017-3 https://book.douban.com/subject/26944012/?icn=index-latestbook-subject 极简进步史 [英]罗纳德·赖特 2017-4-1 https://book.douban.com/subject/26969002/?icn=index-latestbook-subject 驻马店伤心故事集 郑在欢 2017-2 https://book.douban.com/subject/26854223/?icn=index-latestbook-subject 致薇拉 [美]弗拉基米尔·纳博科夫 2017-3 https://book.douban.com/subject/26841616/?icn=index-latestbook-subject 北方档案 [法]玛格丽特·尤瑟纳尔 2017-2 https://book.douban.com/subject/26980391/?icn=index-latestbook-subject 食帖15：便当灵感集 林江 2017-2 https://book.douban.com/subject/26958882/?icn=index-latestbook-subject 生火 [法]克里斯多夫·夏布特（ChristopheChabouté）编绘 2017-3 https://book.douban.com/subject/26989163/?icn=index-latestbook-subject 文明之光（第四册） 吴军 2017-3-1 https://book.douban.com/subject/26878906/?icn=index-latestbook-subject 公牛山 [美]布赖恩·帕诺威奇 2017-2 https://book.douban.com/subject/26989534/?icn=index-latestbook-subject 几乎消失的偷闲艺术 [加拿大]达尼·拉费里埃 2017-4 https://book.douban.com/subject/26939973/?icn=index-latestbook-subject 散步去 [日]谷口治郎 2017-3 https://book.douban.com/subject/26865333/?icn=index-latestbook-subject 中国1945 [美]理查德·伯恩斯坦(RichardBernstein) 2017-3-1 https://book.douban.com/subject/26989242/?icn=index-latestbook-subject 有匪2：离恨楼 Priest 2017-3 https://book.douban.com/subject/26985790/?icn=index-latestbook-subject 女人、火与危险事物 [美]乔治·莱考夫 2017-3 https://book.douban.com/subject/26972277/?icn=index-latestbook-subject 寻找时间的人 [爱尔兰]凯特·汤普森 2017-3 https://www.douban.com/note/610758170/ 白先勇细说红楼梦【全二册】 白先勇 2017-2-1 https://read.douban.com/ebook/31540864/?dcs=book-hot&amp;amp;dcm=douban&amp;amp;dct=read-subject 奇爱博士 [英]彼得·乔治 2016-8-1 https://read.douban.com/ebook/31433872/?dcs=book-hot&amp;amp;dcm=douban&amp;amp;dct=read-subject 在时光中盛开的女子 李筱懿 2017-3 https://read.douban.com/ebook/31178635/?dcs=book-hot&amp;amp;dcm=douban&amp;amp;dct=read-subject 如何高效记忆（原书第2版） [美]肯尼思•希格比（KennethL.Higbee） 2017-3-5 https://read.douban.com/ebook/31358183/?dcs=book-hot&amp;amp;dcm=douban&amp;amp;dct=read-subject 愿无岁月可回头 回忆专用小马甲 2016-9 https://read.douban.com/ebook/31341636/?dcs=book-hot&amp;amp;dcm=douban&amp;amp;dct=read-subject 走神的艺术与科学 [新西兰]迈克尔·C.科尔巴里斯 2017-3-1 https://read.douban.com/ebook/27621094/?dcs=book-hot&amp;amp;dcm=douban&amp;amp;dct=read-subject 神秘的量子生命 [英]吉姆•艾尔－哈利利/约翰乔•麦克法登 2016-8 https://read.douban.com/ebook/31221966/?dcs=book-hot&amp;amp;dcm=douban&amp;amp;dct=read-subject 寻找时间的人 [爱尔兰]凯特·汤普森 2017-3 https://read.douban.com/ebook/31481323/?dcs=book-hot&amp;amp;dcm=douban&amp;amp;dct=read-subject 山之四季 [日]高村光太郎 2017-1 https://read.douban.com/ebook/31154855/?dcs=book-hot&amp;amp;dcm=douban&amp;amp;dct=read-subject 东北游记 [美]迈克尔·麦尔 2017-1]]></content>
      <categories>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
        <tag>Python re模块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关系型数据库与非关系型数据库]]></title>
    <url>%2F2019%2F01%2F20%2F%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[&ensp; &ensp; 写在前面：关系型数据库主要有 SQL Server、MySQL、Hive-SQL、Oracle、Postgresql 及 spark 和 flink 等支持 SQL 语法的数据库。非关系型数据库通常指以 Hbase、MongoDB、Redis等为代表的不能支持SQL的数据库。不仅两类差异很大，同类也有差异。 &ensp; &ensp; 收集汇总网上各路大神总结经验，包含结构化数据和非结构化数据区别，列存储和行存储区别，及主流7种数据库区别。待有时间再做整理。 结构化、半结构化和非结构化数据 https://blog.csdn.net/xuanjiewu/article/details/70171463行式存储和列式存储的区别 https://www.jianshu.com/p/3d3950c9fb067种数据库的分析 https://blog.csdn.net/hzp666/article/details/79168675]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>结构化数据 非结构化数据</tag>
        <tag>列存储 行存储</tag>
        <tag>关系型数据库 非关系型数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关系型数据库数据类型]]></title>
    <url>%2F2019%2F01%2F20%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[&ensp; &ensp; 写在前面：提起数据库，一般意义上指存储结构化数据的关系型数据库，主要有 SQL Server、MySQL、Hive-SQL、Oracle、Postgresql 及 spark 和 flink 等支持 SQL 语法的数据库。工作中业务需求变动需要对不同数据库数据进行调度，除了掌握调度方法，要多关注不同数据库数据类型区别。 SQLCharacter 字符串 数据类型 描述 char(n) 固定长度的字符串。最多 8,000 个字符。 varchar(n) 可变长度的字符串。最多 8,000 个字符。 varchar(max) 可变长度的字符串。最多 1,073,741,824 个字符。 text 可变长度的字符串。最多 2GB 字符数据。 Unicode 字符串 数据类型 描述 nchar(n) 固定长度的 Unicode 数据。最多 4,000 个字符。 nvarchar(n) 可变长度的 Unicode 数据。最多 4,000 个字符。 nvarchar(max) 可变长度的 Unicode 数据。最多 536,870,912 个字符。 ntext 可变长度的 Unicode 数据。最多 2GB 字符数据。 Binary 类型 数据类型 描述 bit 允许 0、1 或 NULL binary(n) 固定长度的二进制数据。最多 8,000 字节。 varbinary(n) 可变长度的二进制数据。最多 8,000 字节。 varbinary(max) 可变长度的二进制数据。最多 2GB 字节。 image 可变长度的二进制数据。最多 2GB。 Number 类型 数据类型 描述 tinyint 允许从 0 到 255 的所有数字。 smallint 允许从 -32,768 到 32,767 的所有数字。 int 允许从 -2,147,483,648 到 2,147,483,647 的所有数字。 bigint 允许介于 -9,223,372,036,854,775,808 和 9,223,372,036,854,775,807 之间的所有数字。 decimal(p,s) 固定精度和比例的数字。允许从 -10^38 +1 到 10^38 -1 之间的数字。p 参数指示可以存储的最大位数（小数点左侧和右侧）。p 必须是 1 到 38 之间的值。默认是 18。s 参数指示小数点右侧存储的最大位数。s 必须是 0 到 p 之间的值。默认是 0。 numeric(p,s) 固定精度和比例的数字。允许从 -10^38 +1 到 10^38 -1 之间的数字。p 参数指示可以存储的最大位数（小数点左侧和右侧）。p 必须是 1 到 38 之间的值。默认是 18。s 参数指示小数点右侧存储的最大位数。s 必须是 0 到 p 之间的值。默认是 0。 smallmoney 介于 -214,748.3648 和 214,748.3647 之间的货币数据。 money 介于 -922,337,203,685,477.5808 和 922,337,203,685,477.5807 之间的货币数据。 float(n) 从 -1.79E + 308 到 1.79E + 308 的浮动精度数字数据。 参数 n 指示该字段保存 4 字节还是 8 字节。float(24) 保存 4 字节，而 float(53) 保存 8 字节。n 的默认值是 53。 real 从 -3.40E + 38 到 3.40E + 38 的浮动精度数字数据。 Date 类型 数据类型 描述 datetime 从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 3.33 毫秒。 datetime2 从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 100 纳秒。 smalldatetime 从 1900 年 1 月 1 日 到 2079 年 6 月 6 日，精度为 1 分钟。 date 仅存储日期。从 0001 年 1 月 1 日 到 9999 年 12 月 31 日。 time 仅存储时间。精度为 100 纳秒。 3-5 bytes datetimeoffset 与 datetime2 相同，外加时区偏移。 timestamp 存储唯一的数字，每当创建或修改某行时，该数字会更新。timestamp 基于内部时钟，不对应真实时间。每个表只能有一个 timestamp 变量。 其他数据类型 数据类型 描述 sql_variant 存储最多 8,000 字节不同数据类型的数据，除了 text、ntext 以及 timestamp。 uniqueidentifier 存储全局标识符 (GUID)。 xml 存储 XML 格式化数据。最多 2GB。 cursor 存储对用于数据库操作的指针的引用。 table 存储结果集，供稍后处理。 MySQLText 类型 数据类型 描述 CHAR(size) 保存固定长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的长度。最多 255 个字符。 VARCHAR(size) 保存可变长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的最大长度。最多 255 个字符。注释：如果值的长度大于 255，则被转换为 TEXT 类型。 TINYTEXT 存放最大长度为 255 个字符的字符串。 TEXT 存放最大长度为 65,535 个字符的字符串。 BLOB 用于 BLOBs (Binary Large OBjects)。存放最多 65,535 字节的数据。 MEDIUMTEXT 存放最大长度为 16,777,215 个字符的字符串。 MEDIUMBLOB 用于 BLOBs (Binary Large OBjects)。存放最多 16,777,215 字节的数据。 LONGTEXT 存放最大长度为 4,294,967,295 个字符的字符串。 LONGBLOB 用于 BLOBs (Binary Large OBjects)。存放最多 4,294,967,295 字节的数据。 ENUM(x,y,z,etc.) 允许你输入可能值的列表。可以在 ENUM 列表中列出最大 65535 个值。如果列表中不存在插入的值，则插入空值。注释：这些值是按照你输入的顺序存储的。可以按照此格式输入可能的值：ENUM(‘X’,’Y’,’Z’) SET 与 ENUM 类似，SET 最多只能包含 64 个列表项，不过 SET 可存储一个以上的值。 Number 类型 数据类型 描述 TINYINT(size) -128 到 127 常规。0 到 255 无符号*。在括号中规定最大位数。 SMALLINT(size) -32768 到 32767 常规。0 到 65535 无符号*。在括号中规定最大位数。 MEDIUMINT(size) -8388608 到 8388607 普通。0 to 16777215 无符号*。在括号中规定最大位数。 INT(size) -2147483648 到 2147483647 常规。0 到 4294967295 无符号*。在括号中规定最大位数。 BIGINT(size) -9223372036854775808 到 9223372036854775807 常规。0 到 18446744073709551615 无符号*。在括号中规定最大位数。 FLOAT(size,d) 带有浮动小数点的小数字。在括号中规定最大位数。在 d 参数中规定小数点右侧的最大位数。 DOUBLE(size,d) 带有浮动小数点的大数字。在括号中规定最大位数。在 d 参数中规定小数点右侧的最大位数。 DECIMAL(size,d) 作为字符串存储的 DOUBLE 类型，允许固定的小数点。 * 这些整数类型拥有额外的选项 UNSIGNED。通常，整数可以是负数或正数。如果添加 UNSIGNED 属性，那么范围将从 0 开始，而不是某个负数。 Date 类型 数据类型 描述 DATE() 日期。格式：YYYY-MM-DD 注释：支持的范围是从 ‘1000-01-01’ 到 ‘9999-12-31’ DATETIME() *日期和时间的组合。格式：YYYY-MM-DD HH:MM:SS 注释：支持的范围是从 ‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’ TIMESTAMP() *时间戳。TIMESTAMP 值使用 Unix 纪元(‘1970-01-01 00:00:00’ UTC) 至今的描述来存储。格式：YYYY-MM-DD HH:MM:SS 注释：支持的范围是从 ‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-09 03:14:07’ UTC TIME() 时间。格式：HH:MM:SS 注释：支持的范围是从 ‘-838:59:59’ 到 ‘838:59:59’ YEAR() 2 位或 4 位格式的年。注释：4 位格式所允许的值：1901 到 2155。2 位格式所允许的值：70 到 69，表示从 1970 到 2069。 HiveNumber 类型 类型 长度 备注 TINYINT 1字节 有符号整型 SMALLINT 2字节 有符号整型 INT 4字节 有符号整型 BIGINT 8字节 有符号整型 FLOAT 4字节 有符号单精度浮点数 DOUBLE 8字节 有符号双精度浮点数 DECIMAL — 可带小数的精确数字字符串 Date 类型 类型 长度 备注 TIMESTAMP — 时间戳，内容格式：yyyy-mm-dd hh:mm:ss[.f…] DATE — 日期，内容格式：YYYY­MM­DD INTERVAL — 间隔时间 String 类型 类型 长度 备注 STRING — 字符串 VARCHAR 字符数范围1 - 65535 长度不定字符串 CHAR 最大的字符数：255 长度固定字符串 Misc 类型 类型 长度 备注 BOOLEAN — 布尔类型 TRUE/FALSE BINARY — 字节序列 复合类 类型 长度 备注 ARRAY — 包含同类型元素的数组，索引从0开始 ARRAY MAP — 字典 MAP&lt;primitive_type, data_type&gt; STRUCT — 结构体 STRUCT&lt;col_name : data_type [COMMENT col_comment], ...&gt; UNIONTYPE — 联合体 UNIONTYPE&lt;data_type, data_type, ...&gt; Oracle 字段类型 中文说明 限制条件 其它说明 CHAR 固定长度字符串 最大长度2000 bytes VARCHAR2 可变长度的字符串 最大长度4000 bytes 可做索引的最大长度749 NCHAR 根据字符集而定的固定长度字符串 最大长度2000 bytes NVARCHAR2 根据字符集而定的可变长度字符串 最大长度4000 bytes DATE 日期（日-月-年） DD-MM-YY（HH-MI-SS） LONG 超长字符串 最大长度2G（231-1） 足够存储大部头著作 RAW 固定长度的二进制数据 最大长度2000 bytes 可存放多媒体图象声音等 LONG RAW 可变长度的二进制数据 最大长度2G 同上 BLOB 二进制数据 最大长度4G CLOB 字符数据 最大长度4G NCLOB 根据字符集而定的字符数据 最大长度4G BFILE 存放在数据库外的二进制数据 最大长度4G ROWID 数据表中记录的唯一行号 10 bytes ********.****.****格式，*为0或1 NROWID 二进制数据表中记录的唯一行号 最大长度4000 bytes NUMBER(P,S) 数字类型 P为总位数，S为小数位数 DECIMAL(P,S) 数字类型 P为总位数，S为小数位数 INTEGER 整数类型 小的整数 FLOAT 浮点数类型 NUMBER(38)，双精度 REAL 实数类型 NUMBER(63)，精度更高 SparkSQLNumber 类型 类型 说明 备注 ByteType 代表一个字节的整数。 范围是-128到127 ShortType 代表两个字节的整数。 范围是-32768到32767 IntegerType 代表4个字节的整数。 范围是-2147483648到2147483647 LongType 代表8个字节的整数。 范围是-9223372036854775808到9223372036854775807 FloatType 代表4字节的单精度浮点数 DoubleType 代表8字节的双精度浮点数 DecimalType 代表任意精度的10进制数据。 通过内部的java.math.BigDecimal支持。BigDecimal由一个任意精度的整型非标度值和一个32位整数组成。 StringType 代表一个字符串值 BinaryType 代表一个byte序列值 BooleanType 代表boolean值 Date 类型 类型 说明 TimestampType 代表包含字段年，月，日，时，分，秒的值 DateType 代表包含字段年，月，日的值 复杂类型 类型 说明 ArrayType(elementType, containsNull) 代表由elementType类型元素组成的序列值。containsNull用来指明ArrayType中的值是否有null值。 MapType(keyType, valueType, valueContainsNull) 表示包括一组键 - 值对的值。通过keyType表示key数据的类型，通过valueType表示value数据的类型。valueContainsNull用来指明MapType中的值是否有null值。 StructType(fields) 表示一个拥有StructFields (fields)序列结构的值。 StructField(name, dataType, nullable) 代表StructType中的一个字段，字段的名字通过name指定，dataType指定field的数据类型，nullable表示字段的值是否有null值。 参考来源：SQL MySQL数据类型Oracle数据类型Hive数据类型SQL官方手册MySQL官方手册Hive官方手册Oracle官方手册Spark官方手册Flink官方手册]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库-数据类型</tag>
        <tag>SQL</tag>
        <tag>mysql</tag>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown-Hexo语法汇总]]></title>
    <url>%2F2019%2F01%2F15%2FMarkdown-Hexo%E8%AF%AD%E6%B3%95%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[&ensp; &ensp; 写在前面： Hexo 兼容 Markdown 大部分功能，基本满足写文章需求。但 Markdown 不足以支撑更复杂的页面设计功能，更多需求需通过 HTML、CSS、JS。 1. 标题使用 # 或 - 标记标题123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 2. 段落Markdown 默认段落的换行是使用两个以上空格加上回车，hexo 对此有优化，所以即使不加空格仅使用回车依旧可以实现换行功能。首行缩进 &amp;ensp; //相当于1个中文，2字节 2.1 字体字体1234浮生六记 *斜体文本* **粗体文本** ***粗斜体文本*** 浮生六记浮生六记浮生六记浮生六记 2.2 分隔线分割线123**** * ****** 2.3 删除线分割线12浮生六记 ~~浮生六记~~ 浮生六记浮生六记 2.4 下划线可用 HTML &lt;u&gt;……&lt;/u&gt; 实现下划线功能下划线1&lt;u&gt;浮生六记&lt;/u&gt;好棒啊浮生六记好棒啊 2.5 脚注&amp;超链接Markdown 脚注语法在 hexo 不兼容，此处用超链接加文字功能实现鼠标悬于上方显示想要文字。脚注&超链接1234[^浮生六记] [^浮生六记]: 老沈贼厉害！！！[浮生六记](https://www.pfchen.top &quot;老沈贼厉害！！！&quot;)浮生六记 3. 列表3.1 有序列表和无序列表Markdown 支持有序列表和无序列表。无序列表使用星号 *、加号 + 或是减号 - 作为列表标记：无序列表123456789* 浮生一记* 浮生二记* 浮生三记+ 浮生一记+ 浮生二记+ 浮生三记- 浮生一记- 浮生二记- 浮生三记 浮生一记 浮生二记 浮生三记 浮生一记 浮生二记 浮生三记 浮生一记 浮生二记 浮生三记 有序列表使用数字并加上 . 号来表示，如：有序列表1231. 浮生一记2. 浮生二记3. 浮生三记 浮生一记 浮生二记 浮生三记 3.2 列表嵌套列表嵌套只需在子列表中的选项添加四个空格即可。列表嵌套1234561. 浮生一记： - 一一记 - 一二记2. 浮生二记： - 二一记 - 二二记 浮生一记： 一一记 一二记 浮生二记： 二一记 二二记 4. 区块区块&列表嵌套12345678910&gt; 浮生六记：&gt; &gt; 卷一《闺房记乐》 &gt; &gt; 卷二《闲情记趣》 &gt; &gt; 卷三《坎坷记愁》 &gt; &gt; 卷四《浪游记快》 &gt; &gt; 卷五《中山记历》 &gt; &gt; * 佚失 &gt; &gt; 卷六《养生记道》&gt; &gt; * 佚失 浮生六记： 卷一《闺房记乐》卷二《闲情记趣》卷三《坎坷记愁》卷四《浪游记快》卷五《中山记历》 佚失 卷六《养生记道》 佚失 5. 代码函数&代码片段1`printf()` 函数 printf() 函数 Hexo-Text如下方式打印代码区块12345&#123;% codeblock 代码区块 lang:语言名称 %&#125; $(document).ready(function () &#123; alert(&apos;RUNOOB&apos;); &#125;);&#123;% endcodeblock %&#125; 代码区块123$(document).ready(function () &#123; alert('RUNOOB');&#125;); Markdown 用如下方式打印代码区块12345```javascript 语言名称(代码标颜色)$(document).ready(function () &#123; alert(&apos;RUNOOB&apos;);&#125;);``` 123$(document).ready(function () &#123; alert('RUNOOB');&#125;); 6. 链接6.1 普通链接普通链接123[链接名称](链接地址 &quot;悬浮命名&quot;)或者&lt;链接地址&gt; 浮 · 生http://pfchen.top/ 6.2 高级链接高级链接1234567链接也可以用变量来代替，文档末尾附带变量地址：这个链接用 1 作为网址变量 [Google][1]这个链接用 runoob 作为网址变量 [Runoob][runoob]然后在文档的结尾为变量赋值（网址）[1]: http://www.google.com/[runoob]: http://www.runoob.com/ 链接也可以用变量来代替，文档末尾附带变量地址：这个链接用 1 作为网址变量 Google这个链接用 runoob 作为网址变量 Runoob然后在文档的结尾为变量赋值（网址） 7. 图片图片12![](Markdown-Hexo语法汇总/maomi.jpeg)![头像](Markdown-Hexo语法汇总/maomi.jpeg &quot;头像素材&quot;) 图片调整12&lt;img src=&quot;Markdown语法汇总-hexo/maomi.jpeg&quot; width=&quot;10%&quot;; height=&quot;10%&quot;; style=&quot; margin-top:5px; margin-left:100px&quot;&gt;&lt;img src=&quot;Markdown语法汇总-hexo/maomi.jpeg&quot; width=&quot;10%&quot;; height=&quot;10%&quot;; style=&quot;position:absolute; margin-top:-160px; margin-left:300px&quot;&gt; 8. 表格表格1234| 表头 | 表头 || ---- | ---- || 单元格 | 单元格 || 单元格 | 单元格 | 表头 表头 单元格 单元格 单元格 单元格 表格对齐12345| 表头1 | 表头2 | 表头3 | 表头4 || --- | :-- | :--: | --: || 默认左对齐 | 左对齐 | 居中对其 | 右对齐 || 默认左对齐 | 左对齐 | 居中对其 | 右对齐 || 默认左对齐 | 左对齐 | 居中对其 | 右对齐 | 表头1 表头2 表头3 表头4 默认左对齐 左对齐 居中对其 右对齐 默认左对齐 左对齐 居中对其 右对齐 默认左对齐 左对齐 居中对其 右对齐 9. 高级技巧9.1 支持 HTML 元素支持部分 HTML 元素，Hexo 可直接写 HTML、JS、CSS 等目前支持的 HTML 元素有：&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等 ，如：支持HTML元素1使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑使用 Ctrl+Alt+Del 重启电脑 9.2 转义转义1234**文本加粗** \*\* 文本加粗 \*\*`** 文本加粗 **`\` 文本加粗** 文本加粗 **** 文本加粗 **` Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：123456789101112\ 反斜线` 反引号* 星号_ 下划线&#123;&#125; 花括号[] 方括号() 小括号# 井字号+ 加号- 减号. 英文句点! 感叹号 9.3 公式markdown 支持数学公式，但是 hexo 默认的渲染引擎 marked 不支持 mathjax ，所以需要更换 Hexo 的 markdown 渲染引擎为 hexo-renderer-kramed 引擎，后者支持 mathjax 公式输出。具体教程可参考 AomanHao。公式12345678$$\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 = \begin&#123;vmatrix&#125; \mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp; \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp; \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\\end&#123;vmatrix&#125;$$$$sqrt()$$ \mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} & \mathbf{j} & \mathbf{k} \\ \frac{\partial X}{\partial u} & \frac{\partial Y}{\partial u} & 0 \\ \frac{\partial X}{\partial v} & \frac{\partial Y}{\partial v} & 0 \\ \end{vmatrix}sqrt()参考来源：菜鸟教程-Markdown]]></content>
      <categories>
        <category>Markdown语法</category>
      </categories>
      <tags>
        <tag>Markdown-Hexo</tag>
      </tags>
  </entry>
</search>
